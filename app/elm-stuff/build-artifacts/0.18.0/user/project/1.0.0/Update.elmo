var _user$project$Update$updateSquareHighlight = F4(
	function (model, row, col, clickType) {
		var helpHighlightPosReverse = {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Tuple$second(model.helpHighlightPos),
			_1: _elm_lang$core$Tuple$first(model.helpHighlightPos)
		};
		var updateBoard = function (mapper) {
			return A2(
				_elm_lang$core$List$map,
				function (rowlist) {
					return A2(
						_elm_lang$core$List$map,
						function (square) {
							return mapper(square);
						},
						rowlist);
				},
				model.board.board);
		};
		var currentBoard = model.board;
		var _p0 = clickType;
		if (_p0.ctor === 'FirstClick') {
			return _elm_lang$core$Native_Utils.update(
				currentBoard,
				{
					board: updateBoard(
						function (square) {
							return ((!_elm_lang$core$Native_Utils.eq(square.pos, helpHighlightPosReverse)) && (_elm_lang$core$Native_Utils.eq(
								square.pos,
								{ctor: '_Tuple2', _0: row, _1: col}) && ((!A2(_elm_lang$core$List$member, _user$project$Types$ChosenSquare, square.highlightType)) && _elm_lang$core$Native_Utils.eq(model.playerColor, square.figure.color)))) ? _elm_lang$core$Native_Utils.update(
								square,
								{
									highlightType: {
										ctor: '::',
										_0: _user$project$Types$ChosenSquare,
										_1: {ctor: '[]'}
									}
								}) : (_elm_lang$core$Native_Utils.eq(square.pos, helpHighlightPosReverse) ? _elm_lang$core$Native_Utils.update(
								square,
								{
									highlightType: {
										ctor: '::',
										_0: _user$project$Types$AIRecommmends,
										_1: {ctor: '[]'}
									}
								}) : _elm_lang$core$Native_Utils.update(
								square,
								{
									highlightType: A2(_elm_lang$core$List$member, _user$project$Types$Check, square.highlightType) ? {
										ctor: '::',
										_0: _user$project$Types$None,
										_1: {
											ctor: '::',
											_0: _user$project$Types$Check,
											_1: {ctor: '[]'}
										}
									} : {
										ctor: '::',
										_0: _user$project$Types$None,
										_1: {ctor: '[]'}
									}
								}));
						})
				});
		} else {
			var movedSquare = A2(
				_user$project$Moves$searchSquare,
				currentBoard,
				function (square) {
					return A2(_elm_lang$core$List$member, _user$project$Types$ChosenSquare, square.highlightType);
				});
			return _elm_lang$core$Native_Utils.update(
				currentBoard,
				{
					board: updateBoard(
						function (square) {
							return _elm_lang$core$Native_Utils.eq(
								square.pos,
								{ctor: '_Tuple2', _0: row, _1: col}) ? _elm_lang$core$Native_Utils.update(
								square,
								{
									highlightType: {
										ctor: '::',
										_0: _user$project$Types$SuccessfulMove,
										_1: {ctor: '[]'}
									},
									figure: movedSquare.figure
								}) : (_elm_lang$core$Native_Utils.eq(square.pos, movedSquare.pos) ? _elm_lang$core$Native_Utils.update(
								square,
								{
									highlightType: {
										ctor: '::',
										_0: _user$project$Types$None,
										_1: {ctor: '[]'}
									},
									figure: A3(_user$project$Types$Figure, _user$project$Types$Empty, _user$project$Types$NoColor, '')
								}) : _elm_lang$core$Native_Utils.update(
								square,
								{
									highlightType: A2(_elm_lang$core$List$member, _user$project$Types$Check, square.highlightType) ? {
										ctor: '::',
										_0: _user$project$Types$None,
										_1: {
											ctor: '::',
											_0: _user$project$Types$Check,
											_1: {ctor: '[]'}
										}
									} : {
										ctor: '::',
										_0: _user$project$Types$None,
										_1: {ctor: '[]'}
									}
								}));
						})
				});
		}
	});
var _user$project$Update$printErrors = F2(
	function (e, model) {
		var _p1 = A2(_elm_lang$core$Debug$log, 'Http error:', e);
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{
					errors: {ctor: '::', _0: e, _1: model.errors}
				}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$Update$update = F2(
	function (msg, model) {
		update:
		while (true) {
			var moveFigureAiCmd = function () {
				var _p2 = model.game.gameType;
				if (_p2.ctor === 'PlayerVsAi') {
					return _user$project$Model$moveFigureAi(model.game.gameId);
				} else {
					return _elm_lang$core$Platform_Cmd$none;
				}
			}();
			var _p3 = msg;
			switch (_p3.ctor) {
				case 'SquareSelected':
					var _p10 = _p3._0;
					var _p9 = _p3._1;
					var _p8 = _p3._2;
					var moveFigurePlayerCmd = function () {
						var _p4 = {ctor: '_Tuple2', _0: _p8, _1: model.playerColor};
						if (((_p4.ctor === '_Tuple2') && (_p4._0.ctor === 'MoveFigure')) && (_p4._1.ctor === 'White')) {
							return _elm_lang$core$Platform_Cmd$batch(
								{
									ctor: '::',
									_0: _user$project$Model$playervsAiCheckmateCheck(model.game.gameId),
									_1: {
										ctor: '::',
										_0: A3(
											_user$project$Model$moveFigurePlayerOne,
											model.game.gameId,
											model.selectedSquare,
											{ctor: '_Tuple2', _0: _p10, _1: _p9}),
										_1: {
											ctor: '::',
											_0: _user$project$Model$playervsAiCheckmateCheck(model.game.gameId),
											_1: {ctor: '[]'}
										}
									}
								});
						} else {
							return _elm_lang$core$Platform_Cmd$none;
						}
					}();
					var switchColor = function () {
						var _p5 = model.playerColor;
						switch (_p5.ctor) {
							case 'White':
								return _user$project$Types$Black;
							case 'Black':
								return _user$project$Types$White;
							default:
								return _user$project$Types$NoColor;
						}
					}();
					var highlightBoard = A2(
						_user$project$Moves$markCheck,
						A4(_user$project$Update$updateSquareHighlight, model, _p10, _p9, _p8),
						switchColor);
					var changePlayer = F2(
						function (color, board) {
							var _p6 = A2(
								_user$project$Moves$searchSquare,
								board,
								function (square) {
									return A2(_elm_lang$core$List$member, _user$project$Types$SuccessfulMove, square.highlightType);
								}).pos;
							if (((_p6.ctor === '_Tuple2') && (_p6._0 === -1)) && (_p6._1 === -1)) {
								return color;
							} else {
								var _p7 = color;
								switch (_p7.ctor) {
									case 'Black':
										return _user$project$Types$White;
									case 'White':
										return _user$project$Types$Black;
									default:
										return _user$project$Types$White;
								}
							}
						});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								selectedSquare: {ctor: '_Tuple2', _0: _p10, _1: _p9},
								board: _user$project$Moves$returnPossibleMovesHighlighted(highlightBoard),
								playerColor: A2(changePlayer, model.playerColor, highlightBoard),
								helpHighlightPos: {ctor: '_Tuple2', _0: -1, _1: -1}
							}),
						_1: moveFigurePlayerCmd
					};
				case 'SendCheckmateCheck':
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _user$project$Model$playervsAiCheckmateCheck(model.game.gameId)
					};
				case 'Help':
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _user$project$Model$playerVsAiHelp(model.game.gameId)
					};
				case 'ShowMainMenu':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{route: _user$project$Model$MainMenu}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'ShowHighscoresMenu':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{route: _user$project$Model$HighscoresMenu}),
						_1: _user$project$Model$getHighscores
					};
				case 'ShowGameTypesMenu':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{route: _user$project$Model$GameTypeMenu}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'ShowGameOverMenu':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{route: _user$project$Model$GameOverMenu}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'OnePlayerGame':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{route: _user$project$Model$GameOne}),
						_1: _user$project$Model$startGameOne
					};
				case 'TwoPlayerGame':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{route: _user$project$Model$GameTwo}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'QuitGame':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								route: _user$project$Model$MainMenu,
								selectedSquare: {ctor: '_Tuple2', _0: -1, _1: -1},
								playerColor: _user$project$Types$White,
								errors: {ctor: '[]'},
								game: {gameType: _user$project$Types$NoGame, gameId: ''},
								board: _user$project$Board$createInitialBoard,
								highscores: {ctor: '[]'},
								currTime: 0,
								startTime: 0,
								score: 0
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'GameOver':
					var currentGame = model.game;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								route: model.winner ? _user$project$Model$GameOverMenu : _user$project$Model$GameOverLost,
								startTime: 0,
								game: _elm_lang$core$Native_Utils.update(
									currentGame,
									{gameType: _user$project$Types$NoGame})
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'NameChanged':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{playersName: _p3._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'PostHighscores':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{route: _user$project$Model$MainMenu}),
						_1: A2(
							_user$project$Model$postHighscores,
							model.playersName,
							_elm_lang$core$Basics$toString(model.score))
					};
				case 'Tick':
					var _p18 = _p3._0;
					var currGame = model.game;
					var checkGameOver = (_elm_lang$core$Native_Utils.eq(
						A2(
							_elm_lang$core$Basics_ops['%'],
							_elm_lang$core$Basics$round(
								_elm_lang$core$Time$inSeconds(_p18)),
							3),
						0) && (!_elm_lang$core$Native_Utils.eq(model.game.gameType, _user$project$Types$NoGame))) ? _user$project$Model$playervsAiCheckmateCheck(model.game.gameId) : _elm_lang$core$Platform_Cmd$none;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								currTime: _p18,
								score: (_elm_lang$core$Native_Utils.cmp(model.startTime, 0) > 0) ? _elm_lang$core$Basics$round(
									_elm_lang$core$Time$inSeconds(_p18) - _elm_lang$core$Time$inSeconds(model.startTime)) : model.score
							}),
						_1: checkGameOver
					};
				case 'Highscores':
					if (_p3._0.ctor === 'Ok') {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{highscores: _p3._0._0}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return A2(_user$project$Update$printErrors, _p3._0._0, model);
					}
				case 'GameOneStart':
					if (_p3._0.ctor === 'Ok') {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									startTime: model.currTime,
									game: {gameType: _user$project$Types$PlayerVsAi, gameId: _p3._0._0},
									board: _user$project$Board$createInitialBoard,
									playerColor: _user$project$Types$White
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return A2(_user$project$Update$printErrors, _p3._0._0, model);
					}
				case 'MoveFigurePlayerOne':
					if (_p3._0.ctor === 'Ok') {
						var _p13 = A2(
							_elm_lang$core$Debug$log,
							'MoveFigPlayerOne result',
							_elm_lang$core$Basics$toString(_p3._0._0));
						return {
							ctor: '_Tuple2',
							_0: model,
							_1: _elm_lang$core$Platform_Cmd$batch(
								{
									ctor: '::',
									_0: _user$project$Model$playervsAiCheckmateCheck(model.game.gameId),
									_1: {
										ctor: '::',
										_0: moveFigureAiCmd,
										_1: {
											ctor: '::',
											_0: _user$project$Model$playervsAiCheckmateCheck(model.game.gameId),
											_1: {ctor: '[]'}
										}
									}
								})
						};
					} else {
						return A2(_user$project$Update$printErrors, _p3._0._0, model);
					}
				case 'MoveFigureAi':
					if (_p3._0.ctor === 'Ok') {
						var _p12 = _p3._0._0;
						var _p11 = A2(
							_elm_lang$core$Debug$log,
							' ',
							_elm_lang$core$Basics$toString(_p12));
						var _v7 = A3(
							_user$project$Model$SquareSelected,
							_elm_lang$core$Tuple$second(_p12.to),
							_elm_lang$core$Tuple$first(_p12.to),
							_user$project$Model$MoveFigure),
							_v8 = _elm_lang$core$Native_Utils.update(
							model,
							{
								board: {
									board: A2(
										_elm_lang$core$List$indexedMap,
										F2(
											function (idxRow, row) {
												return _elm_lang$core$Native_Utils.eq(
													_elm_lang$core$Tuple$second(_p12.from),
													idxRow) ? A2(
													_elm_lang$core$List$indexedMap,
													F2(
														function (idxCol, sqr) {
															return _elm_lang$core$Native_Utils.eq(
																_elm_lang$core$Tuple$first(_p12.from),
																idxCol) ? _elm_lang$core$Native_Utils.update(
																sqr,
																{
																	highlightType: {
																		ctor: '::',
																		_0: _user$project$Types$ChosenSquare,
																		_1: {ctor: '[]'}
																	},
																	pos: sqr.pos
																}) : sqr;
														}),
													row) : row;
											}),
										model.board.board)
								}
							});
						msg = _v7;
						model = _v8;
						continue update;
					} else {
						return A2(_user$project$Update$printErrors, _p3._0._0, model);
					}
				case 'PlayerVsAiHelp':
					if (_p3._0.ctor === 'Ok') {
						var _p15 = _p3._0._0;
						var _p14 = A2(
							_elm_lang$core$Debug$log,
							' ',
							_elm_lang$core$Basics$toString(_p15));
						var _v9 = A3(
							_user$project$Model$SquareSelected,
							_elm_lang$core$Tuple$second(_p15.from),
							_elm_lang$core$Tuple$first(_p15.from),
							_user$project$Model$FirstClick),
							_v10 = _elm_lang$core$Native_Utils.update(
							model,
							{helpHighlightPos: _p15.to});
						msg = _v9;
						model = _v10;
						continue update;
					} else {
						return A2(_user$project$Update$printErrors, _p3._0._0, model);
					}
				case 'CheckmateCheck':
					if (_p3._0.ctor === 'Ok') {
						var _p17 = _p3._0._0;
						var _p16 = A2(
							_elm_lang$core$Debug$log,
							'CheckmateCheck ',
							_elm_lang$core$Basics$toString(_p17));
						if (A2(_elm_lang$core$String$contains, _p17, 'check mate')) {
							var _v11 = _user$project$Model$GameOver,
								_v12 = model;
							msg = _v11;
							model = _v12;
							continue update;
						} else {
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
						}
					} else {
						return A2(_user$project$Update$printErrors, _p3._0._0, model);
					}
				default:
					if (_p3._0.ctor === 'Ok') {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						return A2(_user$project$Update$printErrors, _p3._0._0, model);
					}
			}
		}
	});
