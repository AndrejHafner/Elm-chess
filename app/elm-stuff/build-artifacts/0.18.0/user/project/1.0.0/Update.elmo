var _user$project$Update$updateSquareHighlight = F4(
	function (model, row, col, clickType) {
		var updateBoard = function (mapper) {
			return A2(
				_elm_lang$core$List$map,
				function (rowlist) {
					return A2(
						_elm_lang$core$List$map,
						function (square) {
							return mapper(square);
						},
						rowlist);
				},
				model.board.board);
		};
		var currentBoard = model.board;
		var _p0 = clickType;
		if (_p0.ctor === 'FirstClick') {
			return _elm_lang$core$Native_Utils.update(
				currentBoard,
				{
					board: updateBoard(
						function (square) {
							return (_elm_lang$core$Native_Utils.eq(
								square.pos,
								{ctor: '_Tuple2', _0: row, _1: col}) && ((!A2(_elm_lang$core$List$member, _user$project$Types$ChosenSquare, square.highlightType)) && _elm_lang$core$Native_Utils.eq(model.playerColor, square.figure.color))) ? _elm_lang$core$Native_Utils.update(
								square,
								{
									highlightType: {ctor: '::', _0: _user$project$Types$ChosenSquare, _1: square.highlightType}
								}) : _elm_lang$core$Native_Utils.update(
								square,
								{
									highlightType: {
										ctor: '::',
										_0: _user$project$Types$None,
										_1: {ctor: '[]'}
									}
								});
						})
				});
		} else {
			var movedSquare = A2(
				_user$project$Moves$searchSquare,
				currentBoard,
				function (square) {
					return A2(_elm_lang$core$List$member, _user$project$Types$ChosenSquare, square.highlightType);
				});
			return _elm_lang$core$Native_Utils.update(
				currentBoard,
				{
					board: updateBoard(
						function (square) {
							return _elm_lang$core$Native_Utils.eq(
								square.pos,
								{ctor: '_Tuple2', _0: row, _1: col}) ? _elm_lang$core$Native_Utils.update(
								square,
								{
									highlightType: {
										ctor: '::',
										_0: _user$project$Types$SuccessfulMove,
										_1: {ctor: '[]'}
									},
									figure: movedSquare.figure
								}) : (_elm_lang$core$Native_Utils.eq(square.pos, movedSquare.pos) ? _elm_lang$core$Native_Utils.update(
								square,
								{
									highlightType: {
										ctor: '::',
										_0: _user$project$Types$None,
										_1: {ctor: '[]'}
									},
									figure: A3(_user$project$Types$Figure, _user$project$Types$Empty, _user$project$Types$NoColor, '')
								}) : _elm_lang$core$Native_Utils.update(
								square,
								{
									highlightType: {
										ctor: '::',
										_0: _user$project$Types$None,
										_1: {ctor: '[]'}
									}
								}));
						})
				});
		}
	});
var _user$project$Update$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'SquareSelected':
				var _p5 = _p1._0;
				var _p4 = _p1._1;
				var highlightBoard = A4(_user$project$Update$updateSquareHighlight, model, _p5, _p4, _p1._2);
				var changePlayer = F2(
					function (color, board) {
						var _p2 = A2(
							_user$project$Moves$searchSquare,
							board,
							function (square) {
								return A2(_elm_lang$core$List$member, _user$project$Types$SuccessfulMove, square.highlightType);
							}).pos;
						if (((_p2.ctor === '_Tuple2') && (_p2._0 === -1)) && (_p2._1 === -1)) {
							return color;
						} else {
							var _p3 = color;
							switch (_p3.ctor) {
								case 'Black':
									return _user$project$Types$White;
								case 'White':
									return _user$project$Types$Black;
								default:
									return _user$project$Types$White;
							}
						}
					});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							selectedSquare: {ctor: '_Tuple2', _0: _p5, _1: _p4},
							board: _user$project$Moves$returnPossibleMovesHighlighted(highlightBoard),
							playerColor: A2(changePlayer, model.playerColor, highlightBoard)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ShowMainMenu':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{route: _user$project$Model$MainMenu}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ShowHighscoresMenu':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{route: _user$project$Model$HighscoresMenu}),
					_1: _user$project$Model$getHighscores
				};
			case 'ShowGameTypesMenu':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{route: _user$project$Model$GameTypeMenu}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnePlayerGame':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{route: _user$project$Model$GameOne}),
					_1: _user$project$Model$startGameOne
				};
			case 'Tick':
				var _p6 = _p1._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currTime: _p6,
							score: (_elm_lang$core$Native_Utils.cmp(model.startTime, 0) > 0) ? _elm_lang$core$Basics$round(
								_elm_lang$core$Time$inSeconds(_p6) - _elm_lang$core$Time$inSeconds(model.startTime)) : model.score
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Highscores':
				if (_p1._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{highscores: _p1._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p8 = _p1._0._0;
					var _p7 = A2(_elm_lang$core$Debug$log, 'highscores get err', _p8);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								errors: {ctor: '::', _0: _p8, _1: model.errors}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'GameOneStart':
				if (_p1._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								startTime: model.currTime,
								game: {gameType: _user$project$Types$PlayerVsAi, gameId: _p1._0._0}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p10 = _p1._0._0;
					var _p9 = A2(_elm_lang$core$Debug$log, 'highscores get err', _p10);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								errors: {ctor: '::', _0: _p10, _1: model.errors}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
